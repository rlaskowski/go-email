// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package emailservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	MessageStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (EmailService_MessageStatClient, error)
	ReceiveMessage(ctx context.Context, in *IncomingMsgRequest, opts ...grpc.CallOption) (EmailService_ReceiveMessageClient, error)
	RouteMessage(ctx context.Context, opts ...grpc.CallOption) (EmailService_RouteMessageClient, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) MessageStat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (EmailService_MessageStatClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmailService_ServiceDesc.Streams[0], "/emailservice.EmailService/MessageStat", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceMessageStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmailService_MessageStatClient interface {
	Recv() (*Stat, error)
	grpc.ClientStream
}

type emailServiceMessageStatClient struct {
	grpc.ClientStream
}

func (x *emailServiceMessageStatClient) Recv() (*Stat, error) {
	m := new(Stat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emailServiceClient) ReceiveMessage(ctx context.Context, in *IncomingMsgRequest, opts ...grpc.CallOption) (EmailService_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmailService_ServiceDesc.Streams[1], "/emailservice.EmailService/ReceiveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmailService_ReceiveMessageClient interface {
	Recv() (*IncomingMsgResponse, error)
	grpc.ClientStream
}

type emailServiceReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *emailServiceReceiveMessageClient) Recv() (*IncomingMsgResponse, error) {
	m := new(IncomingMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emailServiceClient) RouteMessage(ctx context.Context, opts ...grpc.CallOption) (EmailService_RouteMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmailService_ServiceDesc.Streams[2], "/emailservice.EmailService/RouteMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &emailServiceRouteMessageClient{stream}
	return x, nil
}

type EmailService_RouteMessageClient interface {
	Send(*Stat) error
	Recv() (*IncomingMsgResponse, error)
	grpc.ClientStream
}

type emailServiceRouteMessageClient struct {
	grpc.ClientStream
}

func (x *emailServiceRouteMessageClient) Send(m *Stat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *emailServiceRouteMessageClient) Recv() (*IncomingMsgResponse, error) {
	m := new(IncomingMsgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	MessageStat(*StatRequest, EmailService_MessageStatServer) error
	ReceiveMessage(*IncomingMsgRequest, EmailService_ReceiveMessageServer) error
	RouteMessage(EmailService_RouteMessageServer) error
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct {
}

func (UnimplementedEmailServiceServer) MessageStat(*StatRequest, EmailService_MessageStatServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageStat not implemented")
}
func (UnimplementedEmailServiceServer) ReceiveMessage(*IncomingMsgRequest, EmailService_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedEmailServiceServer) RouteMessage(EmailService_RouteMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteMessage not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_MessageStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmailServiceServer).MessageStat(m, &emailServiceMessageStatServer{stream})
}

type EmailService_MessageStatServer interface {
	Send(*Stat) error
	grpc.ServerStream
}

type emailServiceMessageStatServer struct {
	grpc.ServerStream
}

func (x *emailServiceMessageStatServer) Send(m *Stat) error {
	return x.ServerStream.SendMsg(m)
}

func _EmailService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IncomingMsgRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmailServiceServer).ReceiveMessage(m, &emailServiceReceiveMessageServer{stream})
}

type EmailService_ReceiveMessageServer interface {
	Send(*IncomingMsgResponse) error
	grpc.ServerStream
}

type emailServiceReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *emailServiceReceiveMessageServer) Send(m *IncomingMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmailService_RouteMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmailServiceServer).RouteMessage(&emailServiceRouteMessageServer{stream})
}

type EmailService_RouteMessageServer interface {
	Send(*IncomingMsgResponse) error
	Recv() (*Stat, error)
	grpc.ServerStream
}

type emailServiceRouteMessageServer struct {
	grpc.ServerStream
}

func (x *emailServiceRouteMessageServer) Send(m *IncomingMsgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *emailServiceRouteMessageServer) Recv() (*Stat, error) {
	m := new(Stat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emailservice.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStat",
			Handler:       _EmailService_MessageStat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveMessage",
			Handler:       _EmailService_ReceiveMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RouteMessage",
			Handler:       _EmailService_RouteMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/protobuf/emailservice/email_service.proto",
}
